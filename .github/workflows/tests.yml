name: Run Tests

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install jq
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
      # Temporary step to verify GCP credentials. Remove before opening a PR.

    - name: Install Google Cloud SDK
      run: |
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        sudo apt-get install apt-transport-https ca-certificates -y
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
        sudo apt-get update && sudo apt-get install google-cloud-sdk -y

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Set up Google Application Credentials
      run: |
        debug_gac() {
          echo "=== DEBUG GAC at $(date) ==="
          echo "GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS"
          echo "File exists?"
          test -f /tmp/gcp-credentials.json && echo "Yes" || echo "No"
          echo "File has content?"
          test -s /tmp/gcp-credentials.json && echo "Yes" || echo "No"
          echo "File contents:"
          cat /tmp/gcp-credentials.json || echo "Failed to cat file"
          echo "Directory listing:"
          ls -lrt /tmp/
          echo "=== END DEBUG ==="
        }

        echo "Before creating credentials file:"
        debug_gac

        echo "Creating GCP credentials file..."
        jq -n --arg client_id "${{ secrets.GAC_CLIENT_ID }}" \
              --arg client_secret "${{ secrets.GAC_CLIENT_SECRET }}" \
              --arg quota_project_id "${{ secrets.GAC_QUOTA_PROJECT_ID }}" \
              --arg refresh_token "${{ secrets.GAC_REFRESH_TOKEN }}" \
              --arg type "${{ secrets.GAC_TYPE }}" \
              '{
                client_id: $client_id,
                client_secret: $client_secret,
                quota_project_id: $quota_project_id,
                refresh_token: $refresh_token,
                type: $type
              }' > /tmp/gcp-credentials.json
        chmod 644 /tmp/gcp-credentials.json
        sudo chown root:root /tmp/gcp-credentials.json

        echo "After creating credentials file:"
        debug_gac
      env:
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-credentials.json

    - name: Verifying GAC (Temporary)
      run: |
        debug_gac() {
          echo "=== DEBUG GAC at $(date) ==="
          echo "GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS"
          echo "File exists?"
          test -f /tmp/gcp-credentials.json && echo "Yes" || echo "No"
          echo "File has content?"
          test -s /tmp/gcp-credentials.json && echo "Yes" || echo "No"
          echo "File contents:"
          cat /tmp/gcp-credentials.json || echo "Failed to cat file"
          echo "Directory listing:"
          ls -lrt /tmp/
          echo "=== END DEBUG ==="
        }

        echo "Before verification:"
        debug_gac

        echo "Verifying GCP Credentials..."
        if echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" | jq '.quota_project_id'; then
          echo "Parsed quota_project_id successfully."
        else
          echo "Failed to parse JSON. Catting full contents:"
          cat /tmp/gcp-credentials.json
        fi

        echo "After verification:"
        debug_gac
      env:
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-credentials.json

    - name: Make run_tests.sh executable
      run: chmod +x run_tests.sh
    
    - name: Run tests based on event
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GCP_BUCKET_NAME: ${{ secrets.GCP_BUCKET_NAME }}
        GCP_PROJECT_NAME: ${{ secrets.GCP_PROJECT_NAME }}
        SUNO_API_KEY: ${{ secrets.SUNO_API_KEY }}
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-credentials.json
      run: |
        debug_gac() {
          echo "=== DEBUG GAC at $(date) ==="
          echo "GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS"
          echo "File exists?"
          test -f /tmp/gcp-credentials.json && echo "Yes" || echo "No"
          echo "File has content?"
          test -s /tmp/gcp-credentials.json && echo "Yes" || echo "No"
          echo "File contents:"
          cat /tmp/gcp-credentials.json || echo "Failed to cat file"
          echo "Directory listing:"
          ls -lrt /tmp/
          echo "=== END DEBUG ==="
        }

        echo "Before running tests:"
        debug_gac
        set -e  # Exit immediately if a command exits with a non-zero status
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # Run all unit and integration tests on PR
          ./run_tests.sh docker "tests/" -m "unit or integration"
          exit_code=$?
        else
          # Run only non-costly tests on push
          ./run_tests.sh docker "tests/" -m "(unit or integration) and not costly"
          exit_code=$?
        fi
        
        # Exit with the test's exit code
        exit $exit_code
    
    - name: Clean up
      if: always()
      run: |
        rm -f /tmp/gcp-credentials.json

