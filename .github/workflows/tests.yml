name: Run Tests

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install jq
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
      # Temporary step to verify GCP credentials. Remove before opening a PR.

    - name: Verifying GAC
      run: |
        echo "Verifying GCP Credentials..."
        content="${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}"
        
        # Echo the content
        echo "Echoing GCP Credentials:"
        echo "$content"
        
        # Cat the file
        echo "Catting GCP Credentials file:"
        echo "$content" > /tmp/gcp-credentials.json
        cat /tmp/gcp-credentials.json
        
        # Decode if base64 encoded
        echo "Decoding GCP Credentials (if applicable):"
        echo "$content" | base64 --decode || echo "Not base64 encoded"
      # Temporary step to verify GCP credentials. Remove before opening a PR.
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Create GCP credentials file
      run: |
        echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" > /tmp/gcp-credentials.json
    
    - name: Make run_tests.sh executable
      run: chmod +x run_tests.sh
    
    - name: Run tests based on event
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GCP_BUCKET_NAME: ${{ secrets.GCP_BUCKET_NAME }}
        GCP_PROJECT_NAME: ${{ secrets.GCP_PROJECT_NAME }}
        SUNO_API_KEY: ${{ secrets.SUNO_API_KEY }}
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-credentials.json
      run: |
        set -e  # Exit immediately if a command exits with a non-zero status
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # Run all unit and integration tests on PR
          ./run_tests.sh docker "tests/" -m "unit or integration"
          exit_code=$?
        else
          # Run only non-costly tests on push
          ./run_tests.sh docker "tests/" -m "(unit or integration) and not costly"
          exit_code=$?
        fi
        
        # Exit with the test's exit code
        exit $exit_code
    
    - name: Clean up
      if: always()
      run: |
        rm -f /tmp/gcp-credentials.json

