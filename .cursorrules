# Cursor Rules for GANGLIA Project

## Test Execution Rules

### Individual Test Execution (Root Tendril)
For individual test functions, use python command in agent window:
```python
{
  "command": "python -m pytest tests/path/to/test_file.py::test_function_name -v -s",
  "explanation": "Running individual test function",
  "is_background": false,  # Embedded in agent window
  "require_user_approval": false
}
```

### Test Module Execution (Root System)
For complete test files, use python command in agent window:
```python
{
  "command": "python -m pytest tests/path/to/test_file.py -v -s",
  "explanation": "Running test module",
  "is_background": false,  # Embedded in agent window
  "require_user_approval": false
}
```

### Full Test Suite Execution (Trunk)
For running full test suites, ALWAYS use run_tests.sh wrapper in the Composer window:
```python
{
  "command": "./run_tests.sh local unit",
  "explanation": "Running full test suite in Composer window",
  "is_background": true,  # CRITICAL: Must be true to use Composer window
  "require_user_approval": false
}
```

### Smoke Test Execution (Branches)
For running smoke tests, ALWAYS use run_tests.sh wrapper in the Composer window:
```python
{
  "command": "./run_tests.sh local smoke",
  "explanation": "Running smoke tests in Composer window",
  "is_background": true,  # CRITICAL: Must be true to use Composer window
  "require_user_approval": false
}
```

### Integration Test Execution (Canopy)
For running integration tests, ALWAYS use run_tests.sh wrapper in the Composer window:
```python
{
  "command": "./run_tests.sh local integration",
  "explanation": "Running integration tests in Composer window",
  "is_background": true,  # CRITICAL: Must be true to use Composer window
  "require_user_approval": false
}
```

### Test Climbing Process
When fixing issues or making changes:

1. Start at Root Tendril (Individual Test)
   - Run specific failing test
   - Fix and verify
   - MUST proceed to Root System when passing

2. Move to Root System (Test Module)
   - Run entire test file
   - Fix any new failures by going back to Root Tendril
   - MUST proceed to Trunk when passing

3. Move to Trunk (Full Unit Suite)
   - Run in Composer window
   - If failures, identify failing test and go back to Root Tendril
   - MUST proceed to Branches when passing

4. Move to Branches (Smoke Tests)
   - Run in Composer window
   - If failures, trace back to appropriate Root System
   - Consider moving to Canopy if changes warrant

5. Move to Canopy (Integration Tests)
   - Run if changes affect multiple systems
   - If failures, trace back to appropriate level

### Critical Rules
1. NEVER skip levels when climbing up
2. ALWAYS run the next level up after a fix
3. When descending to debug, start at the failing test
4. Document any decisions to stop climbing before Canopy
5. NEVER interrupt tests unless they fail
6. ALWAYS use Composer window for Trunk level and above
7. ALWAYS wait for completion signal before proceeding

### Status File Handling
Each test level above Root System uses timestamped status files:

1. Trunk (Unit Tests):
   - Status file: `/tmp/GANGLIA/test_status_TIMESTAMP.txt`
   - Cleaned up automatically before each run

2. Branches (Smoke Tests):
   - Status file: `/tmp/GANGLIA/smoke_status_TIMESTAMP.txt`
   - Cleaned up automatically before each run

3. Canopy (Integration Tests):
   - Status file: `/tmp/GANGLIA/integration_status_TIMESTAMP.txt`
   - Cleaned up automatically before each run

### Log Files
All test runs above Root System level generate timestamped log files:
- Location: `logs/test_run_MODE_TYPE_TIMESTAMP.log`
- Contains full test output and debug information
- Preserved for debugging and analysis 